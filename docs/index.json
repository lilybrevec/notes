[{"categories":["WriteUps"],"contents":"Advent Cyber 2020 やってみたら楽しかった。    TryHackMe!という教育サイトのイベントで、教育的なCTFになっておりとても楽しいCTF。ご丁寧にサンタ帽の陽気な解説者によるYouTubeで解説動画もあり、辛いときはそれもヒントになるので、CTF解けなくて苦手意識感じている人にも向いている予感。 一時的な環境が作成され、VPNで接続してチャレンジする形式でウェブサイトの作りがなんだか凝っている。\nDay1 A Christmas Crisis  VPNを繋ぐときにリージョンをAU-xxxにしないと繋がらない罠があるので注意。 HTTP, Cookieについての解説記事が書かれている。 フォーマット名はヒントの\u0026quot;shorthand for binary\u0026quot;で検索する。  \u0026gt;\u0026gt;\u0026gt; \u0026#39;もふもふ\u0026#39;.encode(\u0026#39;utf-8\u0026#39;).hex() \u0026#39;e38282e381b5e38282e381b5\u0026#39; \u0026gt;\u0026gt;\u0026gt; bytearray.fromhex(\u0026#34;e38282e381b5e38282e381b5\u0026#34;).decode() \u0026#39;もふもふ\u0026#39;  変換サイト使ってしまったけれど、Pythonですぐ変換できる。 Cookieeは書き換えてリロードすれば読み込まれる。  Day2 The Elf Strikes Back!  php-reverse-shellをphpとしてうまくアップロードさせて、リバースシェル状況を作ることでbashを奪うことが出来た。  Kali/AttackBoxに上のファイルがあるらしい。   リバースシェルはAttackerがncコマンドのlisten mode（sudo nc -lvnp 443）を使うことで設定可能。 最初MacBookのncで-lが使えなかったが、brew install netcatでインストールしたコマンドであればOK リバース シェル悪用の防御 BashでTCP/UDP通信を行う | 俺的備忘録 〜なんかいろいろ〜  Day3 Christmas Chaos  Burpの使い方講座。 ブラウザのプロキシを使ってBurpに転送させ、リクエストを止めたりしつつ、使う。FoxyProxyも使う。 ユーザー名とパスワードの組み合わせを自動で合わせてtryしてくれる機能もあった。 Check that Burp Suite\u0026rsquo;s proxy listener is active - PortSwigger Configuring Firefox to work with Burp - PortSwigger Configuring your external browser to work with Burp - PortSwigger  Day4 Santa\u0026rsquo;s watching  Fuzzing = fancy bruteforcing をやってみようという回 GoBusterというツールで隠れファイルやディレクトリの検出もできる。 OJ/gobuster: Directory/File, DNS and VHost busting tool written in Go gobuster dir -uhttp://example.com -w wordlist.txt -x php,txt,html.で単語帳に登録したワードをもとにファイルを探してくれる。 xmendez/wfuzz: Web application fuzzer  ","permalink":"https://lilybrevec.github.io/notes/blog/adventofcyber_20201207/","tags":["ctf"],"title":"Advent of Cyber 2020 Christmas"},{"categories":["WriteUps"],"contents":"感想   なんか惜しいところまで行ったような気がするんだけど、そうでもなかったりする\u0026hellip;\n  お久しぶりの方々にお会いできたのは嬉しかった。\n  解けた人々によるwriteupはこちら\n https://ctftime.org/event/981/tasks/ これを見ながら、自分でも再現できる手順を書きます。    PolyRSA  「これ、研究で某暗号をやった人間として、できなきゃあかんやつ\u0026hellip;」と思いつつトライ。大体の方針は立つのに細かいところで動けないのはやはり理解していないのでは？という話はさておき。  自分がたどり着いたところ   まずはじめに、作問者からpとnとm^eとeが与えられている。\n RSAのの性質の式をこねってmを出す典型問題というストーリーはわかる。    ちょっとRSAについて復習\n via: RSA暗号の仕組みと安全性 | 高校数学の美しい物語 このページのk1をe、k2をdと表現するパターンがある点に注意。どちらでもいい。    [人物] 公開鍵（n, e） 秘密鍵 d メッセージ m 暗号文 c = m^e 作成途中で出てくる機密情報的なもの p, q [性質] n = p * q (ただしpとqは素数, p!= q) e*d = 1 % (p-1)(q-1) m = (m^e)^ d % n 与えられたものを見る p = 2470567871 n = めっちゃ長い多項式 q = 不明 =\u0026gt; この時点で、RSA暗号の特徴よりn = p * qのため計算できるはずだが、多項式でだるくされている e = 65537 c = m^e = めっちゃ長い多項式 d = 秘密鍵、知りたい。  CTFでの多項式のRSA暗号問題について調べてみる。  via: 0ctf 2019 Quals の babyrsa (crypto) の Writeup - ヾﾉ*＞ㅅ＜)ﾉｼ帳    [引用]\n 元ネタは、学位論文（何…だと！！）の Polynomial based RSA http://www.diva-portal.se/smash/get/diva2:823505/FULLTEXT01.pdf\n   元ネタの論文を読む。多項式でもRSAの性質満たすねーというざっくりとした理解をした。\n  多項式の計算にはSageMathというライブラリが使えそうなので、ubuntuにインストールする。\n  おや、ところで問題文にも\u0026quot;sage\u0026quot;の文字列がありますね、核心っぽい。\n  SageMathは多項式の計算をやってくれるライブラリ。時間かかるのかなと思ったけれど、全然そんなことはなかった。すごい。有能。というか大学の試験でこれ使ったら一瞬で終わりそう。\n  試しに使ってみる\n  sage: P = PolynomialRing(GF(2), 'x') sage: d = P(x^203 + x^202 + x^201 + x^200 + x^199 + x^196 + x^194 + x^193 + x^ ....: 192 + x^191 + x^190 + x^188 + x^187 + x^186 + x^185 + x^184 + x^183 + x^ ....: 181 + x^180 + x^178 + x^177 + x^173 + x^171 + x^170 + x^167 + x^165 + x^ ....: 164 + x^163 + x^160 + x^159 + x^156 + x^155 + x^154 + x^153 + x^152 + x^ ....: 150 + x^148 + x^146 + x^144 + x^143 + x^141 + x^139 + x^138 + x^137 + x^ ....: 135 + x^134 + x^133 + x^130 + x^129 + x^126 + x^125 + x^123 + x^121 + x^ ....: 119 + x^117 + x^116 + x^115 + x^114 + x^113 + x^108 + x^107 + x^104 + x^ ....: 101 + x^99 + x^98 + x^96 + x^95 + x^89 + x^88 + x^84 + x^78 + x^74 + x^7 ....: 3 + x^72 + x^71 + x^67 + x^65 + x^63 + x^61 + x^58 + x^57 + x^54 + x^53 ....: + x^51 + x^50 + x^49 + x^47 + x^46 + x^44 + x^42 + x^40 + x^38 + x^37 + ....: x^36 + x^35 + x^34 + x^33 + x^31 + x^29 + x^28 + x^27 + x^23 + x^22 + x^ ....: 21 + x^19 + x^17 + x^15 + x^12 + x^11 + x^10 + x^6 + x^5 + x^3 + x) sage: print(d.factor()) x * (x + 1) * (x^2 + x + 1)^2 * (x^23 + x^21 + x^18 + x^17 + x^14 + x^11 + x^10 + x^9 + x^8 + x^5 + x^4 + x^3 + 1) * (x^57 + x^55 + x^53 + x^51 + x^47 + x^46 + x^42 + x^41 + x^39 + x^38 + x^36 + x^35 + x^33 + x^32 + x^30 + x^29 + x^28 + x^26 + x^25 + x^24 + x^21 + x^15 + x^13 + x^10 + x^8 + x^7 + x^6 + x^5 + x^4 + x^2 + 1) * (x^117 + x^109 + x^108 + x^104 + x^102 + x^100 + x^99 + x^95 + x^91 + x^90 + x^88 + x^80 + x^73 + x^72 + x^71 + x^69 + x^68 + x^67 + x^60 + x^58 + x^57 + x^56 + x^50 + x^49 + x^48 + x^47 + x^43 + x^40 + x^35 + x^34 + x^33 + x^32 + x^31 + x^27 + x^25 + x^23 + x^20 + x^19 + x^18 + x^14 + x^13 + x^12 + x^10 + x^8 + x^3 + x + 1)  わーいわーい。よくわからないけどでき\u0026hellip;でき\u0026hellip;次\u0026hellip;何しよう\u0026hellip; とりあえず適当に因数分解をしようと思ったが、ここでGFってあれだよね\u0026hellip;有限体\u0026hellip;2でいいのか？pかな\u0026hellip;?と、ごちゃごちゃ古い記憶を取り出したりしていたら終了した。  ","permalink":"https://lilybrevec.github.io/notes/blog/inctf_20200803/","tags":["ctf","Crypt"],"title":"InCTF参加記:PolyRSA"},{"categories":["Testing Codes"],"contents":"Dockerfile Issueに落ちていたDockerfileがバージョンでこけていたので修正。いずれまたバージョンが上がればこけそうな予感。\nFROM gettyimages/spark:2.4.1-hadoop-3.0 RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y wget \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* RUN mkdir -p /apps \u0026amp;\u0026amp; \\ cd /apps \u0026amp;\u0026amp; \\ wget https://ftp.jaist.ac.jp/pub/apache/incubator/livy/0.7.0-incubating/apache-livy-0.7.0-incubating-bin.zip \u0026amp;\u0026amp; \\ unzip apache-livy-0.7.0-incubating-bin.zip -d /apps \u0026amp;\u0026amp; \\ rm -f apache-livy-0.7.0-incubating-bin.zip \u0026amp;\u0026amp; \\ mkdir /apps/apache-livy-0.7.0-incubating-bin/logs EXPOSE 8998 CMD [\u0026quot;/apps/apache-livy-0.7.0-incubating-bin/bin/livy-server\u0026quot;] 起動 $ docker build . -t livy-spark $ docker run -d -p 8998:8998 livy-spark $ curl localhost:8998/sessions -X POST --data '{\u0026quot;kind\u0026quot;:\u0026quot;spark\u0026quot;}' -H \u0026quot;Content-Type: application/json\u0026quot; $ curl localhost:8998/sessions/0/statements -X POST -H 'Content-Type: application/json' -d '{\u0026quot;code\u0026quot;:\u0026quot;val x = List((1, \\\u0026quot;a\\\u0026quot;), (3, \\\u0026quot;b\\\u0026quot;)).toDF(\\\u0026quot;number\\\u0026quot;, \\\u0026quot;key\\\u0026quot;)\u0026quot;}' 動機  apache/incubator-livy: Mirror of Apache livy (Incubating) インキュベーターリヴィの語感が好み〜でとりあえず起動 各種SparkクライアントがSparkクラスターに投げつける前段でREST APIを提供するウェブサーバー  Scala・Python・R受け付けられるように実装素敵   jupyter-incubator/sparkmagic: Jupyter magics and kernels for working with remote Spark clusters  ","permalink":"https://lilybrevec.github.io/notes/blog/livy_20200722/","tags":["hadoop","livy"],"title":"lilybrevecはLivyを起動したい"},{"categories":["Impressions"],"contents":"完全準同型暗号（FHE）と言う暗号がある 英語で言うとFully Homomorphic Encryption.\nCraig Gentry氏が2009年に考案した、暗号化した文同士の加算・乗算相当演算を復号せずに処理できる画期的な暗号の提案になる。\nこの暗号を用いることで、プライバシーの配慮が必要なデータの保持者が手元で暗号化し、データの中身を見られることなく外部に計算作業を任せられ、暗号化された計算済みデータが返ってくれば、秘密鍵で復号してデータを得るといったユースケースが実現できる。 ただし、キーポイントである加算・乗算相当演算の部分で計算時間が大分掛かる。\n完全準同型暗号との出会い 学士修士合わせて3年ほど研究対象として扱わねばならなかったので自分なりに学習することになった。\n入門レベルの勉強資料が少なめであること、特に日本語での資料が限られていることが気になったので、完全準同型暗号への理解が深まりそうな日本語の文献の紹介をしていきたい。\n資料紹介  Fully Homomorphic Encryption Using Ideal Lattices  発案者のCraig Gentry氏の代表作。2020/06/09現在の引用数6508。10ページほどの論文になる。   A FULLY HOMOMORPHIC ENCRYPTION SCHEME  Craig Gentry氏のスタンフォード大博士論文。209ページの大作になるが、一つ一つ丁寧な章立てがあり、輪講しつつ理解を深めるのにちょうど良さそう。   暗号文のままで計算しよう - 準同型暗号入門  よく見かける。研究で使用したプログラムの中にこのスライドの著者の先生のcommitも含まれていたので、きっとお世話になっている。 スライドはイメージを掴むのに良い。他の話題も少し混じっている印象を受ける。31ページ以降が本題。 8ページのカップアンドボールの喩えはマジシャン的にはちょっと混乱しかねない。   イデアル格子暗号入門  個人的にはこれを読んで欲しいが為にこの記事を書いている。特に準同型な暗号というイメージが付かないフェーズの時に是非読んで欲しい。Gentry氏論文タイトルの\u0026quot;Using Ideal Lattices\u0026quot;とあるように数学の概念をいくつか理解しないといけない部分があるが乗り越えたいところ。 これを読んでから完全準同型暗号の説明で出てくる多項式ベースのといった言葉や菱形の妙なマス目の絵の消化が少し良くなった気がした。 著者の有田先生には個人的にも大変お世話になった先生である。先生も含む各暗号研究者達が執筆した「暗号理論と楕円曲線」をまだ読み切れていないものの、第1章から心踊る気配がしたのでいつかもう一度格闘したい。   電子情報通信学会 Vol.99 No.12 (2016.12) - IEICE会誌 試し読みサイト  電子情報通信学会の学会誌が完全準同型暗号をテーマにした特集を実施し、複数の研究者が寄稿したことがある。私は運良くたまたま雑誌形態で手に入れることになったが、これがなければもっとも重要で大変なBootstrapの作業の理解が出来なかったと思う。（もう今は忘れたけど\u0026hellip;） 現在試し読みサイトからの閲覧も可能なので、この機会に是非。   HElib  完全準同型暗号の実装ライブラリのうち著者にもっとも近い実装がHElib。Gentry氏が所属するIBMのもの。（ちなみにさらにフォークしたshaih/HElibが自分がお世話になっていたやつだったような気がする…） あまり自分は詳しくないが、最近は他にも様々な実装ライブラリが考案されている模様。 FHEを使ったコンテストを目にすることもあるので、意外とわいわいしているのかもしれない。なお私は参加しようかなと一瞬思いかけたが明白に無理だろうと判断した。そんな人生がちょっぴり悲しいので、やっても良かったのかもしれない。   その他日本語論文・プレスリリース・プロジェクト  日本語になった時点で数が少ないので、正直現時点では追いかけられる量な気がしている。    何だか眠くなってきたのでこの辺で。 人生の短い一瞬で完全準同型暗号に再び触れることはあるのだろうか？\n","permalink":"https://lilybrevec.github.io/notes/blog/fhe_20200608/","tags":["fhe","crypt"],"title":"完全準同型暗号気になる人が読むと良さげな資料"},{"categories":["Impressions"],"contents":"IcedというRust GUIアプリケーション フレームワークがある  hecrj/iced: A cross-platform GUI library for Rust, inspired by Elm  ElmにインスパイアされたRust製クロスプラットフォームGUIライブラリとのことで、「なんだか便利そう」程度のモチベーションで触ってみたが、結構使い心地が良く、大変気に入っている。\n全体的なスタイルとしては、アプリケーションが状態を保持し、メッセージ等の機能によって状態を変化させる、謂わばステートマシンモデルのアプリケーション製作であり、これが個人的に大変手馴染みが良い。\n Trait iced::Application  このスタイルが恐らくElmからもたらされたと考えられるが、私はElmを全く知らない。 しかし、この手馴染みの良さ、そしてこのどこか懐かしい感覚は一体なんだろうか。\n Rustがパターンマッチングを持つのでOCamlを思い出しているのかしら?\n  待てよ、OCaml..OCamlだっ💡(:3\n 学部3年生の時のOCaml Universeアプリケーション製作だな。\nステートマシンモデルでアプリケーションを作るスタイルの出自については良く分かっていないが、関数型言語系アプリケーションの潮流なのかもしれないなぁと適当なことを考えた。（注：このNotesはひどく適当なので、何かコメントがございましたらIssueでご連絡いただけると幸いです。）\nというわけで、楽しく書かせていただいている。作者に感謝したい。\nあとは、作者に対する好感度も非常に高く持てるところがこのライブラリのいいところな気がする。 例えばIssueでは、ほとんどの質問に対して、作者が質問に良く答えている印象。\n アイコンをどうするかワイワイ話し合っている。楽しそう。  Iced branding #143   個人的に役立ったフォントに関するissue  Does not support chinese? #213   個人的に役立ったストリームデータに関するissue  Create Subscription from futures::stream::Stream #338   キーイベントを簡単に補足する機能が実装されるかといったFuture Request Questionにも回答してもらえている。  Capture Key Events #173    今日はこの辺で。今後は気づいたTipsも投稿したい。\n","permalink":"https://lilybrevec.github.io/notes/blog/iced_20200522/","tags":["Rust"],"title":"Icedを触ってみた"}]